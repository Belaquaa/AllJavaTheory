package L2_OOP.b_SOLID;

public class Theory {
    // =================================================== SOLID ==================================================== \\

    // Принцип единственной ответственности. Каждый класс должен иметь одну инкапсулированную обязанность
    a_SingleResponsibility SRP;
    // Принцип открытости/закрытости. Сущности (классы, модули, методы) открыты для расширения, но закрыты для изменения
    b_OpenClose OCP;
    // Принцип подстановки Лисков. Возможность поменять базовый класс на производный без изменения поведения программы
    c_LiskovSubstitution LSP;
    // Принцип разделения интерфейсов. Клиенты не должны зависить от методов, которые они не используют.
    // Несколько интерфейсов лучше одного универсального
    d_InterfaceSegregation ISP;
    // Принцип инверсии зависимостей. Модули верхних уровней не должны зависеть от модулей нижних,
    // а оба типа должны зависеть от абстракций.
    // Абстракции не должны зависеть от деталей, детали должны зависеть от абстракций (фигура и круг)
    e_DependecnyInversion DIP;
}

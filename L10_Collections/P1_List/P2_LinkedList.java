package L10_Collections.P1_List;

import java.util.LinkedList;
import java.util.List;

public class P2_LinkedList {
    public static void main(String[] args) {
        // =============================================== LinkedList =============================================== \\

        // - Основное использование: LinkedList использует двусвязный список, что позволяет эффективно
        //   вставлять и удалять элементы как в начале, так и в конце списка, может хранить повторяющиеся элементы
        //
        // - Особенности: Каждый элемент списка (узел) содержит ссылки на предыдущий и следующий элементы,
        //   что облегчает добавление и удаление элементов. Доступ к элементам по индексу может быть медленнее
        //   по сравнению с ArrayList, т.к. требуется проходить через список от начала или конца до нужного элемента.
        //
        // - Производительность: Быстрая вставка и удаление O(1), медленный произвольный доступ O(n).

        // Помимо интерфейса List реализует интерфейсы Dequeue и Queue.
        // Соединяет функциональность работы со списком и функциональность очереди.

        // Используется, когда необходимо часто добавлять или удалять элементы, особенно в начало списка.
        // Либо когда нужна вставка элемента в конец за гарантированное время.

        // У LinkedList есть методы для работы с началом и концом списка, которых нет в ArrayList:
        // - addFirst() - Вставляет элемент в начало списка.
        // - addLast() - Вставляет элемент в конец списка.
        // - removeFirst() - Удаляет и возвращает первый элемент из этого списка.
        // - removeLast() - Удаляет и возвращает последний элемент из этого списка.

        // Выгода использования LinkedList в работе с серединой и началом списка.
        // Вставка и удаление в LinkedList устроены гораздо проще, чем в ArrayList
        // просто переопределяются ссылки на соседние элементы.

        // НО! Все элементы массива ArrayList находятся в одном блоке памяти, и операция по сдвигу элементов массива
        // выполняются быстрым низкоуровневым методом System.arraycopy() в кэше процессора.
        // Все это делает использование LinkedList не частым случаем.

        List<String> linkedList = new LinkedList<>();
        linkedList.add("Элемент 1");
        linkedList.add("Элемент 2");
        linkedList.addFirst("Элемент 0");
        linkedList.addLast("Элемент 3");
        System.out.println(linkedList);
        linkedList.remove("Элемент 2");
        System.out.println(linkedList);
        String firstElement = linkedList.getFirst();
        String lastElement = linkedList.getLast();
        System.out.println("Первый элемент: " + firstElement + ", Последний элемент: " + lastElement);
    }
}

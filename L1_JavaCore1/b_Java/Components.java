package L1_JavaCore1.b_Java;

public class Components {
    // =============================================== Компоненты Java ============================================== \\

    // Java - WORA (Write once, run anywhere!)
    // - JDK (JRE + JAVAC + (library, examples, doc, utility)) - включает в себя JRE и инструменты для разработки
    //   - JRE (JVM + Libraries) - включает в себя JVM и библиотеки классов
    //     - JVM (ClassLoader) - использует ClassLoader для загрузки классов, выполняет байт код,
    //                           содержит JIT - преобразует код в машинный в горячих точках, улучшая производительность


    // =============================================== Компоненты Class ============================================= \\

    // Конструктор - метод класса, который вызывается при создании нового объекта этого класса,
    //               можно вызвать один конструктор из другого через this() или из потомка через super()
    // Поля (переменные)
    // Методы (функции)

    public class Car {
        // Поле класса
        private int speed;

        // Конструктор класса
        public Car(int initialSpeed) {
            this.speed = initialSpeed;
        }

        // Метод для увеличения скорости
        public void increaseSpeed(int increment) {
            this.speed += increment;
        }

        // Метод для получения текущей скорости
        public int getSpeed() {
            return this.speed;
        }
    }

    // ============================================ Классы Object & Class =========================================== \\

    // Object - корневой класс, от которого наследуются все остальные классы, кроме Object и ENUM
    // Методы Object: equals(), hashCode(), getClass(), toString(), clone(), finalize()
    // Class - класс,  представляет информацию о классе во время выполнения программы


    // ======================================== Перегрузка & переопределение ======================================== \\

    // Перегрузка (Overloading) - несколько методов с одним названием, но разными параметрами
    // Переопределение (Overriding) - изменение реализации метода, унаследованного от родительского класса


    // ========================================== instanceOf() & getClass() ========================================= \\

    // instanceOf() проверяет, является ли объект экземпляром класса или его подкласса (проверяет цепочку наследования)
    // getClass() возвращает точный класс объекта
}

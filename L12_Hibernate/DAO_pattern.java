package L12_Hibernate;

public class DAO_pattern {
    // ================================================= Паттерн DAO ================================================ \\

    // DAO (Data Access Object) - это паттерн проектирования, который используется для отделения логики доступа
    // к данным от бизнес-логики приложения. Основная идея DAO заключается в том, чтобы инкапсулировать все операции по
    // доступу к данным (например, чтение, запись, обновление, удаление) в отдельный слой и предоставить
    // простой интерфейс для взаимодействия с ним.

    // 1. Интерфейс DAO: Определяет методы для выполнения CRUD (Create, Read, Update, Delete) операций над объектами
    //    данных. Каждый объект данных (например, сущность базы данных) имеет свой собственный интерфейс DAO.
    //
    // 2. Реализация DAO: Содержит конкретную реализацию методов, определенных в интерфейсе DAO. Эта реализация
    //    взаимодействует с источником данных (например, базой данных) для выполнения операций.
    //
    // 3. Объект данных (Entity): Представляет данные, которыми управляет DAO.
    //    Обычно это простой POJO (Plain Old Java Object) класс с геттерами и сеттерами для свойств.
    //
    // 4. Источник данных: Это может быть БД, файл или любой другой источник данных, с которым взаимодействует DAO.
    //
    // * POJO - это обычный класс, который не реализует никаких интерфейсов и не наследуется от специальных классов,
    //   связанных с какими-либо фреймворками.
}

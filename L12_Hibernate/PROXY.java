package L12_Hibernate;

public class PROXY {
    // ==================================================== PROXY =================================================== \\

    // PROXY - паттерн, используется для замены реальной сущности POJO (Plain Old Java Object) и ленивой загрузки
    //
    // Это означает, что данные ассоциированной сущности загружаются из базы данных только тогда, когда они
    // действительно необходимы, а не в момент загрузки основной сущности.
    //
    // Класс PROXY генерируется во время выполнения программы и расширяет исходный класс сущности, используя extends.
    // Поля те же, но они никогда не будут проинициализированы (всегда будут null), т.к. они достались по наследству.
    //
    // Зачем нужна ленивая загрузка? Вы загружаете большую часть своей базы данных, просто загружая один объект БД.
    // Это приведет к проблемам с памятью. Поэтому Hibernate загружает только первый объект и заменяет наборы других
    // объектов прокси. Если вы обращаетесь к прокси-серверу, Hibernate использует текущую сессию для инициализации
    // прокси-сервера и загрузки записей из базы данных.
    //
    // +-------------------------+-------------------------------------------------------------------------------------+
    // | Когда использовать      | Описание                                                                            |
    // | прокси?                 |                                                                                     |
    // +-------------------------+-------------------------------------------------------------------------------------+
    // | удалённый заместитель   | Когда надо осуществлять взаимодействие по сети, а объект-прокси должен имитировать  |
    // | (remote proxies)        | поведение объекта в другом адресном пространстве. Использование прокси позволяет    |
    // |                         | снизить накладные издержки при передаче данных через сеть.                          |
    // +-------------------------+-------------------------------------------------------------------------------------+
    // | виртуальный заместитель | Когда нужно управлять доступом к ресурсу, создание которого требует больших затрат. |
    // | (virtual proxies)       | Реальный объект создается только тогда, когда он действительно может понадобиться,  |
    // |                         | а до этого все запросы к нему обрабатывает прокси-объект.                           |
    // +-------------------------+-------------------------------------------------------------------------------------+
    // | защищающий заместитель  | Когда необходимо разграничить доступ к вызываемому объекту в зависимости            |
    // | (protection proxies)    | от прав вызывающего объекта.                                                        |
    // +-------------------------+-------------------------------------------------------------------------------------+
    // | "умные ссылки"          | Когда нужно вести подсчёт ссылок на объект или обеспечить потокобезопасную работу   |
    // | (smart reference)       | с реальным объектом.                                                                |
    // +-------------------------+-------------------------------------------------------------------------------------+
}

package L12_Hibernate;

public class Cache {
    // ================================================= Кэш L1, L2 ================================================= \\

    // Hibernate использует два основных уровня кэширования для повышения производительности приложения за счет
    // уменьшения количества запросов к базе данных:
    //
    // 1. Первый уровень кэша (1st Level Cache): Session / EntityManager
    //   - Описание: Первый уровень кэша в Hibernate является встроенным и не может быть отключен.
    //     Он ассоциирован с текущей сессией Hibernate и работает на уровне сессии.
    //   - Работа: Когда вы выполняете запрос на получение сущности, Hibernate сначала проверяет, находится ли эта
    //     сущность в кэше первого уровня. Если да, то данные возвращаются из кэша, минуя обращение к базе данных.
    //     Если нет, Hibernate загружает сущность из базы данных и помещает ее в кэш первого уровня.
    //   - Жизненный цикл: L1 кэш существует только во время жизни сессии и уничтожается вместе с закрытием сессии.
    //
    // 2. Второй уровень кэша (2nd Level Cache): SessionFactory
    //   - Описание: Второй уровень кэша в Hibernate является опциональным и конфигурируемым. Он работает на уровне
    //     SessionFactory и может быть использован между различными сессиями и даже различными приложениями,
    //     если они используют один и тот же SessionFactory.
    //   - Работа: Когда сущность запрашивается и она не найдена в кэше первого уровня, Hibernate проверяет кэш второго
    //     уровня. Если сущность находится там, данные возвращаются из кэша второго уровня. Если нет, Hibernate
    //     загружает сущность из базы данных и может поместить ее в кэш второго уровня для будущего использования.
    //   - Конфигурация: Для использования кэша второго уровня необходимо явно включить его в конфигурации Hibernate и
    //     выбрать провайдера кэша второго уровня (например, EhCache, Infinispan).
    //
    // 3. Кэш запросов (Query Cache):
    //   - Описание: Кэш запросов является дополнением к кэшу второго уровня и позволяет кэшировать результаты запросов.
    //     Это может быть полезно для запросов, которые выполняются часто с одинаковыми параметрами.
    //   - Работа: Кэш запросов сохраняет результаты запросов и идентификаторы сущностей, возвращаемых этими запросами.
    //     При повторном выполнении такого же запроса Hibernate может извлечь идентификаторы сущностей из кэша запросов
    //     и затем загрузить сами сущности из кэша второго уровня или из базы данных, если они там отсутствуют.
    //   - Зависимость: Для эффективной работы кэша запросов необходимо, чтобы был включен и правильно настроен 2L кэщ
    //
    // Использование кэширования в Hibernate позволяет значительно уменьшить нагрузку на базу данных и увеличить
    // производительность приложения за счет сокращения количества выполненных запросов и времени отклика.

}

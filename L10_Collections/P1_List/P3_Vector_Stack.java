package L10_Collections.P1_List;

import java.util.Stack;

public class P3_Vector_Stack {
    public static void main(String[] args) {
        // ============================================= Vector & Stack ============================================= \\

        // Vector
        // - Основное использование: Vector похож на ArrayList, но все методы Vector синхронизированы, что делает его
        //   потокобезопасным (синхронизированным), а размер массива увеличивается в 2 раза
        // - Особенности: Автоматически расширяется, когда необходимо добавить больше элементов, чем вмещает текущий
        //   размер. Из-за синхронизации подходит для использования в многопоточных приложениях.
        // - Производительность: Потокобезопасность за счет снижения производительности по сравнению с ArrayList.

        // Stack
        // - Основное использование: Stack расширяет класс Vector пятью методами, которые позволяют рассматривать
        //   вектор как стек, работающий по принципу "последний пришел - первый вышел" (LIFO).
        // - Особенности: Предоставляет методы для работы со стеком, такие как push (добавление элемента в вершину),
        //   pop (удаление и возвращение верхнего элемента) и peek (возвращает верхний элемент стека без его удаления).
        // - Производительность: Так как Stack основан на Vector, он также является потокобезопасным, но это может
        //   снижать его производительность по сравнению с несинхронизированными альтернативами.
        //
        // Методы Stack:
        // - empty() - Проверяет, пуст ли этот стек.
        //
        // - peek() - Смотрит на объект в верхней части этого стека, не удаляя его из стека.
        //
        // - pop() - Удаляет объект в верхней части этого стека и возвращает этот объект.
        //
        // - push(E item) - Кладет элемент в стек сверху.
        //
        // - search(object o) - Ищет элемент в стеке. Если найден, возвращает его смещение от вершины стека.
        //                      В противном случае возвращает -1.

        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);
        System.out.println("Initial Stack: " + stack);

        // Посмотреть верхний элемент без удаления
        System.out.println("Top element: " + stack.peek());
        while (!stack.isEmpty()) {
            System.out.println("Popped element: " + stack.pop());
        }
    }
}

package L2_OOP.c_Theory;

import java.lang.reflect.Method;

public class Reflection {
    // ================================================== Рефлексия ================================================= \\

    // Рефлексия – это механизм, который позволяет программам исследовать или "рефлексировать" о самих себе.
    // То есть программа может анализировать свои собственные классы, поля, методы и аннотации во время выполнения.
    //
    // Рефлексия позволяет создавать новые экземпляры классов, вызывать методы, получать и устанавливать значения полей
    // динамически, без явного указания их имен в исходном коде.

    // Основные возможности рефлексии включают в себя:
    // Получение информации о классе: можно получить объект Class, который представляет информацию о любом классе,
    // загруженном в JVM. Это может быть сделано разными способами, например, используя метод getClass() у объекта,
    // или через ClassName.class.
    //
    // Создание объектов: Рефлексия позволяет создавать новые экземпляры классов с помощью метода Class.newInstance()
    // или конструктора, полученного через Class.getConstructor().
    //
    // Доступ к полям: Можно получать и устанавливать значения полей объекта, даже если они объявлены как private,
    // используя методы getField(), getDeclaredField(), setAccessible(true), и другие.
    //
    // Вызов методов: С помощью рефлексии можно вызывать любые методы класса, включая приватные,
    // используя методы getMethod(), getDeclaredMethod(), invoke(), и т.д.
    //
    // Анализ аннотаций: Рефлексия позволяет анализировать аннотации, примененные к классам, методам и полям,
    // что может быть полезно для разработки таких инструментов, как фреймворки для тестирования,
    // ORM (Object-Relational Mapping) и другие.
}

class ReflectionExample {
    public static void main(String[] args) {
        try {
            // Создаем объект класса MyClass
            MyClass myClass = new MyClass();

            // Получаем объект типа Class, представляющий класс MyClass
            Class<?> clazz = myClass.getClass();

            // Получаем объект типа Method, представляющий метод sayHello
            // Обратите внимание, что нам нужно знать имя метода и параметры (если они есть)
            Method method = clazz.getDeclaredMethod("sayHello");

            // Делаем метод доступным, если он приватный
            method.setAccessible(true);

            // Вызываем метод sayHello на объекте myClass
            // Поскольку метод sayHello не принимает параметров, передаем null
            method.invoke(myClass);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static class MyClass {
        private void sayHello() {
            System.out.println("Hello, Reflection!");
        }
    }
}


package L10_Collections.P2_Set;

import java.util.HashSet;
import java.util.Set;

public class P2_HashSet {
    public static void main(String[] args) {
        // ================================================ HashSet ================================================= \\

        // HashSet использует хеш-таблицу для хранения элементов. Под капотом HashMap с заглушками значений (null)
        //
        // - Основное использование: HashSet используется для создания коллекции, которая не содержит дубликатов
        //   и где порядок элементов не важен, когда требуется доступ к элементам по индексу.
        // - Особенности: Основан на хеш-таблице, не гарантирует сохранение порядка элементов при итерации.
        //   Вставка и удаление элементов могут быть относительно медленными, особенно для больших объемов данных,
        //   поскольку может потребоваться сдвигать элементы для поддержания порядка списка.
        // - Производительность: Операции add(), remove(), contains() и size() за константное время O(1)

        // Класс Object имеет метод hashCode(), который используется классом HashSet для
        // эффективного размещения объектов, заносимых в коллекцию.
        // В классах объектов, заносимых в HashSet, этот метод должен быть переопределен.

        // Не имеет собственной реализации – под капотом использует HashMap.
        // В качестве значения value HashMap используется заглушка (экземпляр класса Object).
        // Значения HashSet – это ключи внутренней HashMap

        Set<String> hashSet = new HashSet<>();
        hashSet.add("Banana");
        hashSet.add("Apple");
        hashSet.add("Cherry");
        hashSet.add("Apple"); // Дубликаты не добавляются
        if (hashSet.contains("Banana")) System.out.println("Banana is in the set");
        hashSet.remove("Cherry");
        System.out.println(hashSet);

        // ========================================== HashSet vs. TreeSet =========================================== \\

        // Класс HashSet реализует интерфейс Set и основан на хеш-таблице, что оптимизировано для быстрого поиска.
        // Он не сохраняет порядок добавления элементов и может содержать null.
        //
        // Класс TreeSet реализует интерфейс SortedSet и построен на основе красно-черного дерева,
        // сохраняя элементы в отсортированном по возрастанию порядке.
    }
}

package L10_Collections.P4_Map.SortedMap;

public class TreeMapEx {
    public static void main(String[] args) {
        // ============================================== Класс TreeMap ============================================= \\

        // Структура хранения данных красно-черное сбалансированное дерево.
        // По умолчанию TreeMap сортируется по ключам с использованием принципа натуральной сортировки,
        // но это поведение может быть настроено под конкретную задачу при помощи объекта класса Comparator.

        // Красно-черное сбалансированное дерево
        // Все элементы отсортированы в порядке возрастания ключа
        // Порядок сортировки может быть задан Comparator и Comparable

        // Красно-черное сбалансированное дерево (RB-дерево) - это тип двоичного дерева,
        // которое сохраняет свой порядок (balance factor) для обеспечения быстрого поиска и добавления элементов.

        // Красный: Узел, который не участвует в balancing дерева.
        // Чёрный: Узел, который участвует в balancing дерева.

        // =========================================  TreeMap & LinkedHashMap ======================================= \\

        //  Реализация LinkedHashMap отличается от HashMap поддержкой двухсвязанного списка, определяющего порядок
        //  итерации по элементам структуры данных. По умолчанию элементы списка упорядочены согласно их порядку
        //  добавления в LinkedHashMap (insertion-order). Однако порядок итерации можно изменить, установив параметр
        //  конструктора accessOrder в значение true. В этом случае доступ осуществляется по порядку последнего
        //  обращения к элементу (access-order). Это означает, что при вызове методов get() или put() элемент,
        //  к которому обращаемся, перемещается в конец списка.
        //
        //  При добавлении элемента, который уже присутствует в LinkedHashMap (т.е. с одинаковым ключом),
        //  порядок итерации по элементам не изменяется.
    }
}

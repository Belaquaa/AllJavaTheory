package L1_JavaCore1.a_JavaCore;

public class Types {
    // ========================================= Примитивные и ссылочные типы ======================================= \\
    // Примитивные типы:
    // целочисленные: byte(1), short(2), int(4), long(8).
    int integer = 10;
    // вещественные : float(4), double(8).
    float floating = 3.14f;
    // символьные:  char(2).
    char character = 'a';
    // логический: boolean(1 в массиве, 4)
    boolean bool = true;

    // Ссылочные типы: все остальные (в т.ч. классы-обертки)
    String string = "string";
    Integer integer1 = 10;
    Float floating1 = 3.14f;
    Boolean boolean1 = true;

    // ============================================== Нюансы приведения ============================================= \\

    // char + short = int, при арифметических операциях типы автоматически приводятся к int
    // && не вычисляет значение второй части (0 && pass) = 0, & принудительно вычисляет
    //
    // Явное преобразование: преобразование в другой тип, который может привести к потере данных или точности
    short int_to_short = (short) integer;
    // Неявное преобразование: автоматически, когда преобразование расширяет размер типа без потери
    int short_to_int = int_to_short;
    // Потери при неявных приведениях:
    //     * int -> float
    //     * long -> float
    //     * long -> double
    //
    // Autoboxing - преобразование примитива в соответствующий класс-обертку
    Integer autoboxing = integer;
    // Unboxing - преобразование объекта класса-обертки в примитивный тип
    int unboxing = autoboxing;

    // =============================================== Массивы данных =============================================== \\

    // Массив - структура данных, хранящая фиксированное количество элементов одного типа
    int[] massive_int = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    char[] massive_char = new char[3];

    // ========================================= StringBuffer & StringBuffer ======================================== \\

    // String Buffer является потокобезопасным, его методы синхронизированы. Для многопоточки. Медленнее
    StringBuffer stringBuffer = new StringBuffer();
    // String Builder используется в однопотоке. Быстрее
    StringBuilder stringBuilder = new StringBuilder();
}

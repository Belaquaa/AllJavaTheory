package L6_SerializationAndClonning.Cloning;

public class a_Theory {
    // ================================================ Клонирование ================================================ \\

    // Клонирование - это процесс создания точной копии существующего объекта.
    // Клонирование может быть выполнено двумя основными способами:
    // через реализацию интерфейса Cloneable и использование метода clone() или через конструктор копирования.

    // Интерфейс Cloneable и метод clone()
    //
    // Интерфейс Cloneable: Это маркерный интерфейс, который не содержит методов.
    // Класс, реализующий этот интерфейс, указывает, что его объекты могут быть клонированы.
    // Если класс не реализует интерфейс Cloneable, вызов clone() приведет к исключению CloneNotSupportedException.
    //
    // Метод clone(): Этот метод определен в классе Object и возвращает копию объекта.
    // По умолчанию метод clone() создает поверхностную копию объекта,
    // т.е. копируются только примитивные типы данных и ссылки, но не объекты, на которые эти ссылки указывают.
    ClonningWHCloneable Cloneable;

    // Конструктор копирования
    //
    // Конструктор копирования — это конструктор, который создает объект как копию другого объекта.
    // Этот подход не использует интерфейс Cloneable и метод clone().
    ClonningWHConstructor Constructor;


    // ============================================== Виды клонирования ============================================= \\

    // Поверхностное клонирование (используется по умолчанию):
    //   - Копирует только значения полей
    //   - Копирует только ссылку, а не сам объект
    //   - Копирует только верхний уровень объекта, не копируя вложенные объекты ->
    //     Изменения во вложенных объектах отразятся на оригинале, и наоборот
    //
    // Глубокое копирование:
    //   - Копирует сам объект и все объекты, на которые он ссылается (вложенные и ссылочные объекты)
    //   - Результатом являются два независимых объекта
    //
    // Глубокое копирование:
    //   - Через конструктор копирования
    DeepClonningConstructor deepClonningConstructor;
    //   - Через метод clone()
    DeepClonningClone deepClonningClone;
    //   - Через сериализацию
    DeepClonningSerialization deepClonningSerialization;

}

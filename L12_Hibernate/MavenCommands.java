package L12_Hibernate;

public class MavenCommands {
    // =============================================== Команды Maven ================================================ \\

    // 1. mvn compile - компилирует исходный код проекта.
    //    Эта команда компилирует исходный код проекта и помещает результаты в директорию target/classes.
    //
    // 2. mvn test - запускает тесты, используя фреймворк, указанный в проекте (например, JUnit).
    //    Тесты должны быть расположены в соответствующей директории согласно стандартной структуре каталогов Maven.
    //
    // 3. mvn package - компилирует исходный код проекта, запускает тесты и упаковывает результат в формате JAR или WAR
    //    (в зависимости от типа проекта). Этот артефакт помещается в директорию target.
    //
    // 4. mvn install - выполняет те же действия, что и mvn package, и дополнительно копирует пакет в локальный
    //    репозиторий Maven, что делает его доступным для использования в других проектах на этом же компьютере.
    //
    // 5. mvn deploy - выполняет те же действия, что и mvn install, и дополнительно загружает артефакт в удаленный
    //    репозиторий, делая его доступным для других пользователей и проектов.
    //
    // 6. mvn clean - удаляет директорию target, очищая проект от всех файлов, созданных во время предыдущих сборок.
    //
    // 7. mvn validate - проверяет, корректно ли настроен проект, и все ли необходимые информация и ресурсы доступны.
    //
    // 8. mvn verify - выполняет любые проверки, чтобы подтвердить, что пакет соответствует качеству.
    //    Это может включать выполнение интеграционных тестов.
    //
    // 9. mvn site - генерирует сайт проекта, включая документацию, отчеты о покрытии кода тестами,
    //    результаты анализа кода и другую информацию, полезную для команды разработки.
    //
    // 10. mvn help:effective-pom - выводит в консоль эффективный (реальный) POM проекта, включая настройки,
    //    унаследованные от родительских POM и активных профилей.
    //
    // 11. mvn dependency:tree - выводит дерево зависимостей проекта, помогая разработчикам понять,
    //    откуда берутся все зависимости и какие версии используются.
    //
    // 12. mvn archetype:generate - генерирует новый проект на основе архетипа. Архетипы Maven — это шаблоны проектов.

    // ================================================= JAR vs WAR ================================================= \\

    // Jar (Java Archive) и War (Web Application Archive). Вот отличия
    //
    // 1. Назначение:
    //   - Jar: Используется для упаковки и распространения библиотек Java, компонентов или приложений,
    //          которые могут быть запущены на любой платформе с поддержкой Java.
    //   - War: Специализированный формат Jar, предназначенный для распространения веб-приложений,
    //          которые работают на серверах приложений Java (например, Tomcat, JBoss).
    //
    // 2. Содержимое:
    //   - Jar: Может содержать Java-классы, связанные ресурсы (изображения, текстовые файлы и т.д.), метаданные и
    //          манифест-файл, который указывает точку входа для исполняемого приложения (если приложение исполняемое).
    //   - War: Включает в себя Java-классы, JSP, сервлеты, HTML-страницы, JavaScript, CSS, библиотеки в формате Jar,
    //          файлы конфигурации (например, web.xml) и другие ресурсы, необходимые для работы веб-приложения.
    //
    // 3. Структура директорий:
    //   - Jar: Не имеет строго определенной структуры директорий, хотя часто следует стандартной структуре проектов Java.
    //   - War: Имеет строго определенную структуру, включая обязательные директории, такие как WEB-INF
    //          (для классов, библиотек и файлов конфигурации) и, возможно, META-INF.
    //
    // 4. Использование:
    //   - Jar: Может использоваться как для стандартных приложений Java, так и для клиентских приложений, утилит и компонентов.
    //   - War: Используется исключительно для развертывания веб-приложений на серверах приложений или веб-серверах, поддерживающих Java.
    //
    // 5. Запуск:
    //   - Jar: Может быть запущен непосредственно через команду java -jar <имя файла>.jar, если в манифесте указана точка входа.
    //   - War: Не предназначен для прямого запуска. Для работы требуется развертывание на сервере приложений или веб-сервере.
    //
    // Кратко: jar для стандартных библиотек или приложений, war для веб-приложений, развертываемых на серверах.

    // =============================================== Maven vs Gradle ============================================== \\

    // Что одинаково:
    //   Оба являются инструментами для внедрения зависимостей, построения проектов, автоматизации сборки проектов.
    // Отличия:
    //   По-разному конфигурируются: Мавен использует обычную XML, Gradle использует domain-specific language (DSL),
    // основанный на Groovy или Котлине. Плюсы ХМЛ - намного проще в освоении. Плюсы DSL - более жирный синтаксис и
    // более гибкая вещь, чем ХМЛ. Соответственно, можно сделать вывод, что в таком случае Maven больше подойдет
    // для мелких проектов. А Гредл для более крупных проектов. (Гредл более оптимизированный и работает быстрее)
    //
    //   Мавен старее чем Гредл. То есть сейчас стараются использовать Гредл, но уже написано киллометры проектов,
    // использующих Мавен, и эти приложения до сих пор живут и их поддерживают.
    //
    // Итог: невозможно сказать что лучше. У каждого инструмента свои + и -. Но по моему мнению,
    // Мавен лучше подойдет для начинающих с их небольшими проектами. Так как в учебных проектах не удастся
    // прочувствовать всех преймуществ Гредла, а время на изучения вы потратите больше.





}

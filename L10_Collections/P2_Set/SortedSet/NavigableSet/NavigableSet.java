package L10_Collections.P2_Set.SortedSet.NavigableSet;

public class NavigableSet {
    // ============================================= NavigableSet =============================================== \\

    // Интерфейс NavigableSet расширяет SortedSet и добавляет методы для более удобного поиска по коллекции.
    // Например, итератор для обратного порядка - descendingIterator

    // Интерфейс унаследован от SortedSet и расширяет методы навигации, находя ближайшее совпадение по заданному
    // значению. И сродни родительскому интерфейсу в NavigableSet не может быть дубликатов.

    // Методы NavigableSet:
    //
    // - ceiling(E e) - Возвращает наименьший элемент в этом множестве, который больше или равен указанному элементу,
    //   или null, если такого элемента нет.
    //
    // - descendingIterator() - Возвращает итератор по элементам в этом множестве в порядке убывания.
    //
    // - descendingSet() - Возвращает набор элементов множества в обратном порядке.
    //
    // - floor(E e) - Возвращает наибольший элемент в этом наборе, который меньше или равен указанному элементу,
    //   или null, если такого элемента нет.
    //
    // - headSet(E toElement) - Возвращает часть множества, элементы которого строго меньше toElement.
    //
    // - headSet(E toElement, boolean inclusive) - Возвращает часть NavigableSet, все элементы которого меньше
    //   (или равны, если inclusive равно true) toElement.
    //
    // - higher(E e) - Возвращает наименьший элемент в этом множестве, строго больший, чем данный элемент,
    //   или null, если такого элемента нет.
    //
    // - iterator() - Возвращает итератор по элементам в этом множестве в порядке возрастания.
    //
    // - lower(E e) - Возвращает наибольший элемент в этом множестве строго меньше, чем данный элемент,
    //   или null, если такого элемента нет.
    //
    // - pollFirst() - Получает и удаляет первый элемент или возвращает null, если это множество пустое.
    //
    // - pollLast() - Получает и удаляет последний элемент или возвращает null, если это множество пустое.
    //
    // - subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive) -
    //   Возвращает NavigableSet, включающий все элементы вызывающего набора, которые больше fromElement и
    //   меньше toElement. Если fromInclusive равно true, то элемент, равный fromElement, включается.
    //   Если toInclusive равно true, также включается элемент, равный toElement.
    //
    // - subSet(E fromElement, E toElement) - Возвращает представление части этого множества, элементы которого
    //   варьируются от fromElement включительно, до toElement исключительно.
    //
    // - tailSet(E fromElement) - Возвращает представление части этого множества, элементы которого
    //   больше или равны fromElement.
    //
    // - tailSet(E fromElement, boolean inclusive) - Возвращает представление части этого множества,
    //   элементы которого больше fromElement (или равны, если inclusive равно true).
}


package L7_InputOutput;

public class Theory {

    // ============================================ java.io vs. java.nio ============================================ \\

    // java.io (Input/Output) - InputStream, OutputStream, Reader, Writer
    //   - Основан на потоках (Streams), где данные читаются последовательно
    //   - Блокирующий ввод-вывод: операции чтения или записи останавливают выполнение потока до их завершения
    //   - Проще в использовании
    //
    // Классы и интерфейсы для работы:
    //   - File - представляет файл или директорию на файловой системе. Позволяет получать информацию о файле
    // (например, размер, права доступа), создавать, удалять файлы и директории, перечислять файлы в директории.
    //   - FileInputStream / FileOutputStream - для чтения из файла и записи в файл в виде потока байтов.
    //   - FileReader / FileWriter - для чтения из файла и записи в файл символов. Удобны при работе с текстом.
    //   - BufferedReader / BufferedWriter - обёртки для FileReader и FileWriter, добавляющие буферизацию
    // для повышения производительности и удобные методы для построчного чтения и записи.
    //   - RandomAccessFile - позволяет читать данные из файла и записывать данные в файл с возможностью доступа
    //   к любой его части (поиск по файлу, чтение и запись с произвольной позиции).
    //
    // java.nio (New Input/Output) - Channel, ByteBuffer
    //   - Использует каналы и буферы для чтения и записи данных, что позволяет работать с данными более гибко (непосл.)
    //   - Поддерживает неблокирующий ввод-вывод и мультиплексирование -> обработка нескольких соединений в одном потоке
    //   - Подходит для разработки масштабируемых систем (серверов), обрабатывающих множество соединений одновременно
    //
    // Классы и интерфейсы для работы:
    //   -  Paths и Path - класс Paths используется для создания объектов Path, которые представляют пути ФС.
    // Path предоставляет более гибкие средства для работы с путями и файлами по сравнению с классом File.
    //   - Files - содержит статические методы для работы с файлами и директориями
    // (чтение, запись, копирование, перемещение, удаление файлов, чтение атрибутов файла и т.д.).
    //   - FileChannel - предоставляет возможность для чтения, записи, маппинга и манипуляции файлом.
    // Это более низкоуровневый и мощный способ работы с файлами по сравнению с потоками из java.io.
    //   - ByteBuffer - буфер для чтения и записи данных.
    // Используется вместе с каналами (например, FileChannel) для эффективной работы с данными.
    //   - Selector и Channel - используются для неблокирующего ввода-вывода,
    // позволяя обрабатывать множество соединений в одном потоке.

    // ================================================ File vs Path ================================================ \\

    // File (старый способ представления файла или директории, java.io.File)
    //   - файл-ориентированный: прямо работает с файлами и каталогами (создание, удаление, получение свойств)
    //   - меньше возможностей: не поддерживает некоторые операции, такие как создание символических ссылок, чтение
    //                          атрибутов файла, которые не связаны с правами доступа
    //   - блокируюший IO: операции чтения и записи блокируют поток до их завершения
    //
    // Path (новый API, java.nio.file.Path)
    //   - путь-ориентированный: представляет путь в файловой системе и может использоваться с классами Files и
    //                           FileSystem для более сложных операций
    //   - больше возможностей: поддерживает все операции класса File, а также дополнительные: чтение, установка разных
    //                          аттрибутов файла, работа с символическими ссылками, эффективоне перемещение, копирование
    //   - асинхронное IO: использование асинхронных операций чтения и записи, позволяет не блокировать поток при выполн

    // ================================== Разновидности InputStream и OutputStream ================================== \\

    // InputStream
    //   - FileInputStream - для чтения байтов из файла.
    //   - ByteArrayInputStream - позволяет читать данные из массива байтов.
    //   - BufferedInputStream - добавляет функциональность буферизации к другому входному потоку -> эффективное чтение
    //   - DataInputStream - позволяет читать примитивные Java типы данных из потока в портативном формате.
    //   - ObjectInputStream - используется для чтения объектов, которые были сериализованы с помощью ObjectOutputStream
    //   - PipedInputStream - предназначен для чтения данных, отправленных в соответствующий PipedOutputStream.
    //
    // OutputStream
    //   - FileOutputStream - для записи байтов в файл.
    //   - ByteArrayOutputStream - создает буфер в памяти. Все данные, отправленные в этот поток, накапливаются в буфере
    //   - BufferedOutputStream - добавляет функциональность буферизации к другому выходному потоку -> эффективн. запись
    //   - DataOutputStream - позволяет записывать примитивные Java типы данных в выходной поток в портативном формате
    //   - ObjectOutputStream - используется для записи сериализуемых объектов в выходной поток.
    //   - PipedOutputStream - предназначен для отправки данных в соответствующий PipedInputStream.

    // ====================================== Абсолютный и относительный путь ======================================= \\

    // Абсолютный путь:
    //   - Исходит от корневой директории (например, / в Unix/Linux или C:\ в Windows).
    //   - Предоставляет полное и однозначное указание на расположение файла или директории.
    //   - Не зависит от текущей рабочей директории.
    //   - Пример (Unix/Linux): /home/user/documents/report.txt
    //   - Пример (Windows): C:\Users\User\Documents\report.txt
    //
    // Относительный путь:
    //   - Определяется относительно текущей рабочей директории.
    //   - Не начинается с корневой директории; путь строится от текущего местоположения.
    //   - Удобен для ссылок на файлы внутри одной и той же директории или близлежащих директориях.
    //   - Использует . для обозначения текущей директории и .. для обозначения родительской директории.
    //   - Пример (если текущая директория /home/user): documents/report.txt для абсолютного пути /home/user/documents/report.txt
    //   - Пример (если текущая директория /home/user/documents): ../photos/pic.jpg для абсолютного пути /home/user/photos/pic.jpg
}
